from typing import Tuple, Any, List, Callable, Dict, Optional

class Doc:
    def ttl(self) -> Tuple['Doc', Callable[..., 'Tag'],
                           Callable[..., None], Callable[..., None]]: ...
    def stag(self, tag : str, href : Optional[str] = None, rel : Optional[str] = None): ...
    def asis(self, text : str): ...
    def getvalue(self) -> str: ...

    class Tag:
        def __init__(self, doc : 'Doc', name : str, attrs : List[str]) -> None:
            ...
        def __enter__(self):
            ...
        def __exit__(self, tpe, value, traceback):
            ...
    ...

# class Tag:
#     def __call__(self, p : str, *kwargs : List[Any]) -> None: ...
#     def __init__(self, p : str) -> None: ...
#     def __enter__(self) -> None: ...
#     def __exit__(self): ...
